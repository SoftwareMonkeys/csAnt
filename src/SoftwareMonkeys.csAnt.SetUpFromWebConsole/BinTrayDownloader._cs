using System;
using SoftwareMonkeys.csAnt.IO;
using System.Collections.Generic;
using System.IO;


namespace SoftwareMonkeys.csAnt.SetUpFromWebConsole
{
    public class BinTrayDownloader : BaseDownloader
    {
        public FileDownloader Downloader { get;set; }

        public BinTrayDownloader ()
        {
            Downloader = new FileDownloader();
        }

        public override string Download(string releaseName, bool overwrite)
        {
            var url = GetUrl ("csAnt-" + releaseName + "-release");

            Console.WriteLine (url);

            var zipFilePath = GetLocalZipFilePath();
            
            Downloader.Download(url, zipFilePath, overwrite);

            return zipFilePath;
        }

        public string GetLocalZipFilePath()
        {
            return Environment.CurrentDirectory
                + Path.DirectorySeparatorChar
                    + "_tmp"
                    + Path.DirectorySeparatorChar
                    + "csAnt.zip";
        }

        
        static public string GetUrl(string releaseKey)
        {
            throw new NotImplementedException();

            /*var url = "https://csant.codeplex.com/releases/view/119623";
    
            var xpath = "//a[@class='ReleaseLink']";
    
            var prefix = "https://csant.googlecode.com/files/";
    //http://download-codeplex.sec.s-msft.com/Download/Release?ProjectName=csant&DownloadId=812541&FileTime=130390907814570000&Build=20885
            var data = ScrapeLinks(
                url,
                xpath
            );

            var releasePageUrl = (
                from k in data.Keys
                where k == releaseKey
                select data[k]
            ).ToArray()[0];*/
    
            /*

            foreach (string releaseName in data.Keys)
            {
                Console.WriteLine (releaseName);
                if (releaseName == releaseKey)
                {    
                    releasePageUrl = data[releaseName];
                    break;
                }
            }*/

            /*var xpath2 = "//a[@class='FileNameLink']";

            if (string.IsNullOrEmpty(releasePageUrl))
                throw new Exception("Failed to retrieve download information from CodePlex.");

            var data2 = ScrapeLinks(releasePageUrl, xpath2);

            var releaseFinalLink = "";

            foreach (string releaseFileName in data2.Keys)
            {
                Console.WriteLine (releaseFileName);
                Console.WriteLine (data2[releaseFileName]);
               // if (releaseFileName.IndexOf(releaseKey + "-") == 0)
               // {    
                //    releasePageUrl = data[releaseName];
               // }

                releaseFinalLink = data2[releaseFileName];
            }*/

            //WebKit.
    
            return String.Empty;
        }
        
        static public Dictionary<string, string> ScrapeLinks(
            string url,
            string xpath
        )
        {
            throw new NotImplementedException();
            /*var web = new HtmlWeb();
    
            var doc = web.Load(url);
    
            var nodes = doc.DocumentNode.SelectNodes(xpath);
    
            var dict = new Dictionary<string, string>();
    
            if (nodes != null)
            {    
                foreach (var node in nodes)
                {
                    var name = "";
                    var releasePageUrl = "";

                    if (!String.IsNullOrEmpty(node.InnerText.Trim ()))
                        name = node.InnerText.Trim ();

                    if (!String.IsNullOrEmpty(node.Attributes["href"].Value.Trim ()))
                        releasePageUrl = node.Attributes["href"].Value.Trim ();

                    dict.Add (name, releasePageUrl);
                }
            }
    
            return dict;*/
        }
    }
}

