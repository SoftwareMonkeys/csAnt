using System;
using System.IO;
using System.Text;
using System.Xml;

namespace SoftwareMonkeys.csAnt.Projects.Tests
{
	public class MockSolutionCreator
	{
		public string OutputDirectory { get;set; }

		public MockSolutionCreator (string outputDirectory)
		{
			OutputDirectory = outputDirectory;
		}

		public void Create()
		{
			if (!Directory.Exists(OutputDirectory))
				Directory.CreateDirectory(OutputDirectory);

			CreateStandardSolutionFile();
			CreateTestsSolutionFile();

			CreateStandardProjectFile();
			CreateTestsProjectFile();
		}

		public void CreateStandardSolutionFile()
		{
			var fileName = OutputDirectory
				+ Path.DirectorySeparatorChar
				+ "MockSolution.sln";

			var content = @"﻿﻿Microsoft Visual Studio Solution File, Format Version 11.00
# Visual Studio 2010
Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""MockProject"", ""MockProject\MockProject.csproj"", ""{4FD97804-DEE0-4243-B1ED-D4123B741332}""
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{4FD97804-DEE0-4243-B1ED-D4123B741332}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{4FD97804-DEE0-4243-B1ED-D4123B741332}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{4FD97804-DEE0-4243-B1ED-D4123B741332}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{4FD97804-DEE0-4243-B1ED-D4123B741332}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(MonoDevelopProperties) = preSolution
		StartupItem = MockProject\MockProject.csproj
	EndGlobalSection
EndGlobal";

			File.WriteAllText(fileName, content, Encoding.UTF8);
		}

		public void CreateTestsSolutionFile()
		{
			var fileName = OutputDirectory
				+ Path.DirectorySeparatorChar
				+ "MockSolution.Tests.sln";

			var content = @"﻿﻿﻿Microsoft Visual Studio Solution File, Format Version 11.00
# Visual Studio 2010
Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""MockProject.Tests"", ""MockProject.Tests\MockProject.Tests.csproj"", ""{4ABBF7C8-D3B5-4455-9B46-E40B135159A0}""
EndProject
Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""MockProject"", ""MockProject\MockProject.csproj"", ""{4FD97804-DEE0-4243-B1ED-D4123B741332}""
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{4ABBF7C8-D3B5-4455-9B46-E40B135159A0}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{4ABBF7C8-D3B5-4455-9B46-E40B135159A0}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{4ABBF7C8-D3B5-4455-9B46-E40B135159A0}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{4ABBF7C8-D3B5-4455-9B46-E40B135159A0}.Release|Any CPU.Build.0 = Release|Any CPU
		{4FD97804-DEE0-4243-B1ED-D4123B741332}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{4FD97804-DEE0-4243-B1ED-D4123B741332}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{4FD97804-DEE0-4243-B1ED-D4123B741332}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{4FD97804-DEE0-4243-B1ED-D4123B741332}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(MonoDevelopProperties) = preSolution
		StartupItem = MockProject.Tests\MockProject.Tests.csproj
	EndGlobalSection
EndGlobal";

			File.WriteAllText(fileName, content, Encoding.UTF8);
		}

		public void CreateStandardProjectFile()
		{
			var fileName = OutputDirectory
				+ Path.DirectorySeparatorChar
				+ "MockProject"
				+ Path.DirectorySeparatorChar
				+ "MockProject.csproj";

			var content = @"﻿﻿﻿<?xml version=""1.0"" encoding=""utf-8""?>
<Project DefaultTargets=""Build"" ToolsVersion=""4.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
  <PropertyGroup>
    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>
    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>
    <ProductVersion>10.0.0</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4FD97804-DEE0-4243-B1ED-D4123B741332}</ProjectGuid>
    <OutputType>Library</OutputType>
    <RootNamespace>MockProject</RootNamespace>
    <AssemblyName>MockProject</AssemblyName>
  </PropertyGroup>
  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug</OutputPath>
    <DefineConstants>DEBUG;</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <ConsolePause>false</ConsolePause>
  </PropertyGroup>
  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">
    <DebugType>none</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release</OutputPath>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <ConsolePause>false</ConsolePause>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include=""System"" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include=""MyClass.cs"" />
    <Compile Include=""AssemblyInfo.cs"" />
  </ItemGroup>
  <Import Project=""$(MSBuildBinPath)\Microsoft.CSharp.targets"" />
</Project>";

			SaveProjectFile(fileName, content);
		}

		public void CreateTestsProjectFile()
		{
			
			var fileName = OutputDirectory
				+ Path.DirectorySeparatorChar
				+ "MockProject.Tests"
				+ Path.DirectorySeparatorChar
				+ "MockProject.Tests.csproj";

			var content = @"﻿﻿﻿<?xml version=""1.0"" encoding=""utf-8""?>
<Project DefaultTargets=""Build"" ToolsVersion=""4.0"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
  <PropertyGroup>
    <Configuration Condition="" '$(Configuration)' == '' "">Debug</Configuration>
    <Platform Condition="" '$(Platform)' == '' "">AnyCPU</Platform>
    <ProductVersion>10.0.0</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4FD97804-DEE0-4243-B1ED-D4123B741332}</ProjectGuid>
    <OutputType>Library</OutputType>
    <RootNamespace>MockProject.Tests</RootNamespace>
    <AssemblyName>MockProject.Tests</AssemblyName>
  </PropertyGroup>
  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' "">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug</OutputPath>
    <DefineConstants>DEBUG;</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <ConsolePause>false</ConsolePause>
  </PropertyGroup>
  <PropertyGroup Condition="" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' "">
    <DebugType>none</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release</OutputPath>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <ConsolePause>false</ConsolePause>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include=""System"" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include=""MyClass.cs"" />
    <Compile Include=""AssemblyInfo.cs"" />
  </ItemGroup>
  <Import Project=""$(MSBuildBinPath)\Microsoft.CSharp.targets"" />
</Project>";

			SaveProjectFile(fileName, content);
		}

		public void SaveProjectFile (string fileName, string content)
		{
			if (!Directory.Exists(Path.GetDirectoryName(fileName)))
				Directory.CreateDirectory(Path.GetDirectoryName(fileName));

			// Encode the XML string in a UTF-8 byte array
		   // byte[] encodedString = Encoding.UTF8.GetBytes(content);

		    // Put the byte array into a stream and rewind it to the beginning
		   // MemoryStream ms = new MemoryStream(encodedString);
		   // ms.Flush();
		    //ms.Position = 0;

		    // Build the XmlDocument from the MemorySteam of UTF-8 encoded bytes
		   // XmlDocument xmlDoc = new XmlDocument();
		    //xmlDoc.LoadXml(content);

			//xmlDoc.Save (fileName);
			using (var writer = File.CreateText (fileName))
			{
				writer.Write(Encoding.UTF8.GetString(Encoding.UTF8.GetBytes(content)));
			}
		}
	}
}

